{"version":3,"sources":["components/LineChart/LineChart.component.jsx","components/Table/Table.component.jsx","containers/VolumeReport/VolumeReport.container.jsx","components/Navigation/SideNav/SideNav.component.jsx","containers/SpeedReport/SpeedReport.container.jsx","components/Navigation/TopNav/TopNav.component.jsx","axios.js","App.js","store/actions/traffic.js","serviceWorker.js","store/reducers/traffic.js","index.js","components/Navigation/SideNav/SideNav.module.css","components/LineChart/LineChart.module.css","assets/erayus-logo.png","components/Navigation/TopNav/TopNav.module.css"],"names":["lineChart","props","data","labels","datasets","label","dataLabel","fill","borderColor","options","title","display","text","fontSize","fontColor","legend","position","scales","yAxes","scaleLabel","labelString","xAxes","className","classes","LineChart","join","Chart","type","BasicTable","console","log","dataSet","tableHeads","Object","keys","map","headTitle","key","replace","toUpperCase","tableRows","row","dataKey","striped","scrollY","maxHeight","color","textWhite","VolumeReport","state","generateReportingData","fullData","sortedDateAndVolumeRecords","record","dateConverter","date_captured","volume_per_day","sort","a","b","aggregatedData","aggregateData","averagedDataArray","generateFinalData","labelArray","dataArray","setState","this","length","dateStr","split","year","month","Date","reduce","aggregated","curData","getFullYear","String","getMonth","id","captureDate","averageDataObj","toFixed","push","table","sm","md","style","backgroundColor","icon","lg","Component","connect","sideNav","Fragment","SideNav","height","borderBottom","fontFamily","Logo","src","alt","width","fontWeight","to","exact","activeClassName","active","fab","SpeedReport","topNav","dark","expand","right","RightNav","background","padding","far","moment","format","instance","axios","create","baseURL","App","get","then","res","fullDate","result","records","onFetchFullData","path","component","dispatch","Boolean","window","location","hostname","match","initialState","reducer","action","store","createStore","trafficReducer","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.44f11a9e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Chart } from '@bit/primefaces.primereact.chart';\r\nimport classes from './LineChart.module.css';\r\n const lineChart = (props) => {\r\n    const data = {\r\n    labels:props.labels,\r\n    datasets: [\r\n        {\r\n            label: props.dataLabel,\r\n            data: props.data,\r\n            fill: false,\r\n            borderColor: '#0099CC'\r\n        }\r\n    ]\r\n    };\r\n\r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: props.title,\r\n            fontSize: 26,\r\n            fontColor: '#3F729B'\r\n        },\r\n        legend: {\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Average Volume Per Day'\r\n            }\r\n            }],\r\n            xAxes: [{\r\n                scaleLabel: {\r\n                    display: true,\r\n                    labelString: 'Month'\r\n                }\r\n                }]\r\n        } \r\n    }\r\n    return (\r\n        <div className={[classes.LineChart, \"z-depth-1\", \"rounded\"].join(' ') }>\r\n            <Chart type='line' data={data} options={options} />\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default lineChart;\r\n\r\n","import React from 'react';\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\r\n\r\nconst BasicTable = (props) => {\r\n\r\nconsole.log(props.dataSet);\r\n const tableHeads = Object.keys(props.dataSet[0]).map((headTitle) => {\r\n     return <th key={headTitle}>{headTitle.replace(/_/g, \" \").toUpperCase()}</th>\r\n });\r\n const tableRows = props.dataSet.map((row => {\r\n     return (\r\n     <tr key={row[\"id\"]}>\r\n         {Object.keys(row).map((dataKey)=> <td key={dataKey} data={row[dataKey]}>{row[dataKey]}</td>)}\r\n     </tr>\r\n     )\r\n }))\r\n  return (\r\n      <div className=\"z-depth-1\">\r\n        <MDBTable\r\n        className=\"z-depth-1\" \r\n        striped \r\n        scrollY\r\n        maxHeight=\"390px\">\r\n      <MDBTableHead color=\"blue-gradient\"  textWhite>\r\n        <tr>\r\n          {tableHeads}\r\n        </tr>\r\n      </MDBTableHead>\r\n      <MDBTableBody>\r\n        {tableRows}\r\n      </MDBTableBody>\r\n    </MDBTable>\r\n      </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default BasicTable;","import React, { Component } from 'react';\r\nimport LineChart  from '../../components/LineChart/LineChart.component';\r\nimport { connect } from 'react-redux';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBIcon} from \"mdbreact\";\r\nimport Table from '../../components/Table/Table.component';\r\n\r\nclass VolumeReport extends Component {\r\n    \r\n    state = {\r\n        dataSet: [],\r\n        labels: [],\r\n        data: [],\r\n    }\r\n    componentDidMount() {    \r\n        //If reportingData is already generated\r\n        if (this.props.fullData.length > 0) {\r\n            this.generateReportingData(this.props.fullData);\r\n        }\r\n      }\r\n\r\n    generateReportingData = (fullData) => {\r\n            // Filter out unnecessary data and convert date in string to Date\r\n            let dateAndVolumeRecords = fullData.map(record => {\r\n                return { \"date_captured\": this.dateConverter(record.date_captured),  \"volume_per_day\": record.volume_per_day}\r\n            });\r\n            // Sort based on date\r\n            let sortedDateAndVolumeRecords = dateAndVolumeRecords.sort((a, b) => a.date_captured - b.date_captured);\r\n            \r\n            // Generate aggregatedData (sum of volume per day based on the date)\r\n            let aggregatedData = this.aggregateData(sortedDateAndVolumeRecords)\r\n\r\n            // Calculate the average sum of volume per day\r\n            let averagedDataArray = this.generateFinalData(aggregatedData);\r\n            \r\n            const labelArray = averagedDataArray.map(data => data[\"date_captured\"]);\r\n            const dataArray = averagedDataArray.map(data => data[\"average_volume_per_day\"]);\r\n\r\n            this.setState({dataSet: averagedDataArray, labels: labelArray, data: dataArray});\r\n    }\r\n\r\n    dateConverter(dateStr){ //dateStr in YYYY-MMM formate (e.g 2020-Feb)\r\n        let monthMap = {\"Jan\": 0, \"Feb\": 1, \"Mar\": 2, \"Apr\": 3, \"May\": 4, \"Jun\":5,\r\n                        \"Jul\":6, \"Aug\":7, \"Sep\":8, \"Oct\": 9, \"Nov\":10, \"Dec\":11};\r\n        let [year, month] = dateStr.split(\"-\");\r\n        return new Date(+year, monthMap[month]);\r\n    }\r\n\r\n    // Input: [{date_captured: value<Date>, volume_per_day: value<Number>}]\r\n    // Output : [\r\n    //  {\"YYYY-MM\": {\r\n    //      \"sum_volume_per_day\": sum_of_volumes<Number>\r\n    //      \"no_of_records\": value<Number>\r\n    // }}]\r\n    aggregateData (sortedDateAndVolumeRecords) {\r\n        return sortedDateAndVolumeRecords.reduce((aggregated, curData) => {\r\n            let key = curData[\"date_captured\"].getFullYear() + '-' + String(+curData[\"date_captured\"].getMonth() + 1)\r\n            // let key = curData[]\r\n            aggregated[key] = aggregated[key] || {};\r\n            aggregated[key][\"sum_volume_per_day\"] =  aggregated[key][\"sum_volume_per_day\"] ?  +aggregated[key][\"sum_volume_per_day\"] + +curData.volume_per_day : +curData.volume_per_day;\r\n            aggregated[key][\"no_of_records\"] = ++aggregated[key][\"no_of_records\"] || 1;\r\n            return aggregated;  \r\n        },{});\r\n    }\r\n\r\n    // Input: aggregatedData\r\n    // Output: [{\"date_captured\": \"YYYY-MM\", \"average_volume_per_day\": value<Number>}] \r\n    generateFinalData(aggregatedData) {\r\n        let averagedDataArray = [];\r\n        let id = 0;\r\n        for (let captureDate of Object.keys(aggregatedData)) {\r\n            let averageDataObj = {\r\n                \"id\": ++id,\r\n                \"date_captured\": captureDate,\r\n                \"average_volume_per_day\": (aggregatedData[captureDate][\"sum_volume_per_day\"] / aggregatedData[captureDate][\"no_of_records\"]).toFixed(2)\r\n            };\r\n            averagedDataArray.push(averageDataObj)\r\n        } \r\n\r\n        return averagedDataArray\r\n    }\r\n\r\n  render() {\r\n\r\n    const table = this.state.dataSet.length > 0 ? <Table dataSet={this.state.dataSet}/> : null;\r\n    return (\r\n      <div className=\"\">\r\n        <MDBContainer>\r\n            <MDBRow className=\"justify-content-center mb-4\">\r\n                <MDBCol sm=\"12\" md=\"8\">\r\n                    <div className=\"rounded z-depth-1 text-center pb-2\">\r\n                        <div className=\"py-3 text-white\" style={{backgroundColor: '#33b5e5', fontSize: '20px'}}>\r\n                            <strong>NUMBER OF RECORDS</strong>\r\n                        </div>\r\n                        <div className=\"text-strong mt-3\">\r\n                            <h2><MDBIcon icon=\"database\" /> {this.props.fullData.length}</h2>\r\n                        </div>\r\n                    </div>  \r\n                </MDBCol>\r\n            </MDBRow>\r\n            <MDBRow >\r\n                <MDBCol md=\"12\"lg=\"8\" className=\"my-3\">\r\n                    <LineChart \r\n                        title=\"LINE CHART\" \r\n                        dataLabel = \"Average Daily Traffic Volume Captured Per Month\"\r\n                        labels={this.state.labels} \r\n                        data={this.state.data}/>\r\n                 </MDBCol>\r\n                 <MDBCol md=\"12\" lg=\"4\" className=\"my-3\">\r\n                    {table}\r\n                 </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n       \r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {    \r\n    //If reportingData is already generated\r\n    if (this.state.data.length === 0) {\r\n        this.generateReportingData(this.props.fullData);\r\n    }\r\n  }\r\n}\r\nconst mapPropsToState = (state) => {\r\n    return {\r\n        fullData: state.fullData\r\n    }\r\n}\r\n\r\nexport default connect(mapPropsToState)(VolumeReport);","import React, {Component} from 'react';\r\nimport Logo from '../../../assets/erayus-logo.png';\r\nimport classes from './SideNav.module.css';\r\nimport {NavLink} from 'react-router-dom'\r\nimport { MDBIcon } from \"mdbreact\";\r\n\r\n\r\nconst sideNav = (props) => {\r\n    return  (\r\n        <React.Fragment>\r\n            <div className={classes.SideNav}>\r\n                <div className=\"pt-2\"style={{height: '60px', borderBottom: '2px solid #212121'}}>\r\n                    <h2 style={{fontFamily: \"Teko, sans-serif\", fontSize: '40px'}}>Erayus</h2>\r\n                </div>\r\n                <div className={classes.Logo}>\r\n                    <img className=\"mb-3\" src={Logo} alt=\"Logo\" style={{width: '80%', fontWeight: 'bolder'}}/>\r\n                </div>\r\n                <nav>\r\n                   <ul>\r\n                       <li>\r\n                            <NavLink to=\"/\" exact activeClassName={classes.active}>\r\n\r\n                                <MDBIcon icon=\"chart-line\" className=\"mr-2\"/>Volume Per Day     \r\n                            </NavLink>\r\n                        </li>\r\n                       <li>\r\n                            <NavLink to=\"/speed-report\" activeClassName={classes.active}>\r\n                                <MDBIcon fab icon=\"cloudscale\" className=\"mr-2\"/>85th Percentile Speed\r\n                            </NavLink>\r\n                        </li>\r\n                   </ul>\r\n                </nav>\r\n            </div>\r\n        </React.Fragment>\r\n    \r\n    )\r\n}\r\n\r\nexport default sideNav;","import React, { Component } from 'react';\r\n\r\nexport default class SpeedReport extends Component {\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1>Coming soon!</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport {\r\nMDBNavbar, MDBIcon, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBCollapse\r\n} from \"mdbreact\";\r\nimport moment from \"moment\";\r\nimport classes from './TopNav.module.css';\r\nconst  topNav = (props) => {\r\n\r\n  return (\r\n      <MDBNavbar color=\"elegant-color-dark\" dark expand=\"md\" className=\"mb-5\">\r\n        \r\n          <MDBNavbarNav>\r\n                <MDBNavbarBrand>\r\n                <strong className=\"white-text pl-5\" style={{fontSize: '30px', fontWeight: 'bolder', fontFamily: 'Heveltica'}}>Yarra Traffic Report Generator</strong>\r\n            </MDBNavbarBrand>\r\n          </MDBNavbarNav>\r\n          <MDBNavbarNav right className={classes.RightNav}>\r\n            <MDBNavItem  style={{color: 'white', background: '#4B515D', width: '150px', padding: '10px 0px'}}>\r\n                <MDBIcon far icon=\"calendar-alt\" className=\"mr-1\" /> {moment().format(\"MMM Do YY\")}\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n      </MDBNavbar>\r\n    );\r\n}\r\n\r\n\r\nexport default topNav;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n   baseURL: \"https://data.gov.au/data/api/3/action/datastore_search_sql?sql=SELECT%20*%20from%20%229e26683b-6b30-424e-ace7-59047d811d1c%22\"\r\n});\r\n\r\nexport default instance;","import React, {Component} from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {connect} from 'react-redux';\n// import logo from './logo.svg';\nimport './App.css';\nimport VolumeReport from './containers/VolumeReport/VolumeReport.container';\nimport SideNav from './components/Navigation/SideNav/SideNav.component';\nimport SpeedReport from './containers/SpeedReport/SpeedReport.container';\nimport TopNav from './components/Navigation/TopNav/TopNav.component';\nimport * as actionTypes from './store/actions/traffic';\nimport axios from './axios';\n\n\n\nclass App extends Component {\n\n  // generateReportingDate(a)\n  componentDidMount(){\n    axios.get()\n            .then(res => {\n            let fullDate = res.data.result.records;\n            this.props.onFetchFullData(fullDate);\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SideNav/>\n        <div className=\"App-content\">\n          <TopNav/>\n          <Switch>\n            <Route path='/volume-report' component={VolumeReport}/>\n            <Route path='/speed-report' component={SpeedReport}/>\n            <Route path='/' component={VolumeReport}/>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchFullData: (fullData) => dispatch({type: actionTypes.FETCH_FULLDATA, fullData: fullData})\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(App);\n","export const FETCH_FULLDATA = 'FETCH_FULLDATA';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/traffic';\r\n\r\nconst initialState = {\r\n    fullData: []\r\n}\r\n\r\nconst reducer = (state= initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_FULLDATA:\r\n            return {\r\n                fullData: action.fullData\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './index.css';\r\n\r\n\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\n\r\nimport App from './App';\r\nimport {createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nimport trafficReducer from './store/reducers/traffic';\r\n\r\n\r\nconst store = createStore(trafficReducer)\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>    \r\n    </Provider>\r\n        \r\n)\r\n\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideNav\":\"SideNav_SideNav__3beYU\",\"active\":\"SideNav_active__DkRxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LineChart\":\"LineChart_LineChart__2l9K5\"};","module.exports = __webpack_public_path__ + \"static/media/erayus-logo.3b183138.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RightNav\":\"TopNav_RightNav__25SpK\"};"],"sourceRoot":""}